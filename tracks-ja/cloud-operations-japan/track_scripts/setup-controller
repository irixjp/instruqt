#!/bin/bash

#
# Create a playbook for the user to execute
tee /tmp/aws_setup.yml << EOF
---
- name: Deploy AWS credential
  hosts: localhost
  gather_facts: false
  become: true
  vars:
    username: admin
    admin_password: ansible123!
    login: &login
      controller_username: "{{ username }}"
      controller_password: "{{ admin_password }}"
      controller_host: "https://{{ ansible_host }}"
      validate_certs: false

  tasks:
  
    - name: Add AWS credential to automation controller
      awx.awx.credential:
        name: AWS_credential
        description: Amazon Web Services
        organization: "Default"
        state: present
        credential_type: "Amazon Web Services"
        controller_username: "{{ username }}"
        controller_password: "{{ admin_password }}"
        controller_host: "https://{{ ansible_host }}"
        validate_certs: false  
        inputs:
          username: "{{ lookup('env','INSTRUQT_AWS_ACCOUNT_AWSACCOUNT_AWS_ACCESS_KEY_ID') }}"
          password: "{{ lookup('env','INSTRUQT_AWS_ACCOUNT_AWSACCOUNT_AWS_SECRET_ACCESS_KEY') }}"
      register: controller_try
      retries: 5
      until: controller_try is not failed          

    - name: Add EE to the controller instance
      awx.awx.execution_environment:
        name: "AWS Execution Environment"
        image: quay.io/acme_corp/aws_ee
        <<: *login

    - name: Add project
      awx.awx.project:
        name: "AWS Demos Project"
        description: "This is from github.com/ansible-cloud"
        organization: "Default"
        state: present
        scm_type: git
        scm_url: https://github.com/ansible-cloud/aws_demos
        default_environment: "AWS Execution Environment"
        <<: *login

    - name: Delete native job template
      awx.awx.job_template:
        name: "Demo Job Template"
        state: "absent"
        <<: *login

    - name: Create job templates
      awx.awx.job_template:
        name: "{{ item.name }}"
        job_type: "run"
        organization: "Default"
        inventory: "Demo Inventory"
        project: "AWS Demos Project"
        playbook: "{{ item.playbook }}"
        credentials:
          - "AWS_credential"
        state: "present"
        <<: *login
      with_items:
        - { playbook: 'playbooks/aws_resources.yml', name: 'Create AWS Resources' }
        - { playbook: 'playbooks/aws_instances.yml', name: 'Create AWS Instances' }

    - name: Launch a job template
      awx.awx.job_launch:
        job_template: "Create AWS Resources"
        <<: *login
      register: job

    - name: Wait for job to finish
      awx.awx.job_wait:
        job_id: "{{ job.id }}"
        <<: *login

    - name: Launch a job template
      awx.awx.job_launch:
        job_template: "Create AWS Instances"
        <<: *login

    - name: Add an AWS INVENTORY
      awx.awx.inventory:
        name: "AWS Inventory"
        description: "Our AWS Inventory"
        organization: "Default"
        state: present
        <<: *login

    - name: Add an AWS InventorySource
      awx.awx.inventory_source:
        name: "AWS Source"
        description: "Source for the AWS Inventory"
        inventory: "AWS Inventory"
        credential: "AWS_credential"
        source: ec2
        overwrite: "True"
        update_on_launch: "True"
        organization: "Default"
        source_vars:
          private: "false"
          hostnames:
            - 'tag:Name'
          compose: 
            ansible_host: public_ip_address
        state: present
        <<: *login

    - name: Update a single inventory source
      awx.awx.inventory_source_update:
        name: "AWS Source"
        inventory: "AWS Inventory"
        organization: "Default"
        <<: *login

EOF

# Execute above playbook
ansible-playbook /tmp/aws_setup.yml

exit 0