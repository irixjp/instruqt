#!/bin/bash

# Define the target directories and files
group_vars_dir="/home/rhel/ansible-files/group_vars"
host_vars_dir="/home/rhel/ansible-files/host_vars"
files_dir="/home/rhel/ansible-files/files"
web_yml="${group_vars_dir}/web.yml"
node1_yml="${host_vars_dir}/node1.yml"
prod_web_html="${files_dir}/prod_web.html"
dev_web_html="${files_dir}/dev_web.html"
apache_yml="/home/rhel/ansible-files/apache.yml"

# Define the expected content
read -r -d '' web_yml_content << 'EOF'
---
stage: dev
EOF

read -r -d '' node1_yml_content << 'EOF'
---
stage: prod
EOF

read -r -d '' prod_web_html_content_1 << 'EOF'
<body>
<h1>This is a production webserver, take care!</h1>
</body>
EOF

read -r -d '' prod_web_html_content_2 << 'EOF'
<body>
    <h1>This is a production webserver, take care!</h1>
    </body>
EOF

read -r -d '' dev_web_html_content_1 << 'EOF'
<body>
<h1>This is a development webserver, have fun!</h1>
</body>
EOF

read -r -d '' dev_web_html_content_2 << 'EOF'
<body>
    <h1>This is a development webserver, have fun!</h1>
    </body>
EOF

read -r -d '' apache_yml_content << 'EOF'
---
- name: Apache server installed
  hosts: web
  become: true
  tasks:
  - name: latest Apache version installed
    ansible.builtin.package:
      name: httpd
      state: latest
  - name: Apache enabled and running
    ansible.builtin.service:
      name: httpd
      enabled: true
      state: started
  - name: copy web.html
    ansible.builtin.copy:
      src: "{{ stage }}_web.html"
      dest: /var/www/html/index.html
EOF

# Array to store errors
errors=()

# Compare YAML files using Python
compare_yaml() {
    local yaml_file="$1"
    local content="$2"
    export YAML_FILE="$yaml_file"
    export EXPECTED_YAML="$content"
    python3 -c "import sys, os, yaml; sys.exit(0 if yaml.safe_load(open(os.environ['YAML_FILE'])) == yaml.safe_load(os.environ['EXPECTED_YAML']) else 1)"
    return $?
}

check_file_and_yaml_content() {
    local yaml_file="$1"
    local content="$2"
    if [ -f "$yaml_file" ]; then
        if compare_yaml "$yaml_file" "$content"; then
            echo "$yaml_file exists and has the correct content."
        else
            errors+=("$yaml_file has incorrect content. Ensure to copy paste from the example.")
        fi
    else
        errors+=("$yaml_file does not exist.")
    fi
}

# Compare content without considering extra spaces
check_file_and_content_with_regex() {
    local file="$1"
    local content="$2"
    if [ -f "$file" ]; then
        local file_content
        file_content=$(cat "$file" | tr -d '[:space:]')
        local content_no_space
        content_no_space=$(echo "$content" | tr -d '[:space:]')
        if [ "$file_content" == "$content_no_space" ]; then
            echo "$file exists and has the correct content."
        else
            errors+=("$file has incorrect content. Ensure to copy paste from the example.")
        fi
    else
        errors+=("$file does not exist.")
    fi
}

# Check directories
for dir in "$group_vars_dir" "$host_vars_dir" "$files_dir"; do
    if [ -d "$dir" ]; then
        echo "Directory $dir exists."
    else
        errors+=("Directory $dir does not exist.")
    fi
done

# Check files and content
check_file_and_yaml_content "$web_yml" "$web_yml_content"
check_file_and_yaml_content "$node1_yml" "$node1_yml_content"
check_file_and_content_with_regex "$prod_web_html" "$prod_web_html_content_1" "$prod_web_html_content_2"
check_file_and_content_with_regex "$dev_web_html" "$dev_web_html_content_1" "$dev_web_html_content_2"
check_file_and_yaml_content "$apache_yml" "$apache_yml_content"

# If there are any errors, call the fail-message function with all the errors
if [ ${#errors[@]} -gt 0 ]; then
    fail-message "$(IFS=$'\n'; echo "${errors[*]}")"
    fail-message "${errors[*]}"
fi
